package gui;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.NumberFormatter;
import main.Decoder;


import main.FileHandler;
import main.FileSelect;

/**
 *
 * @author Nick Lee
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    
    public MainFrame() {
        initFileSelect();
        initDecoder();
        initFileHandler();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        btngFilterExt = new javax.swing.ButtonGroup();
        dgSelectencoding = new javax.swing.JDialog();

        pSelectencoding = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbSelectencoding = new javax.swing.JTable();
        btnSelectencodingOk = new javax.swing.JButton();
        btnSelectencodingCancel = new javax.swing.JButton();
        dgAuto = new javax.swing.JDialog();
        pAuto = new javax.swing.JPanel();
        lbAutoSuggested = new javax.swing.JLabel();
        lbAutoEncoding = new javax.swing.JLabel();
        btnAutoHelp = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtaAutoEncodings = new javax.swing.JTextArea();
        lbAutoSample = new javax.swing.JLabel();
        btnAutoOk = new javax.swing.JButton();
        dgBrute = new javax.swing.JDialog();
        pBrute = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtaBruteEncodings = new javax.swing.JTextArea();
        btnBruteOk = new javax.swing.JButton();
        dgSearch = new javax.swing.JDialog();
        pSearch = new javax.swing.JPanel();
        btnSearchCancel = new javax.swing.JButton();
        lbSearchContaining = new javax.swing.JLabel();
        subPanelFilesScroll1 = new javax.swing.JScrollPane();
        tbSearchFiles = new javax.swing.JTable();
        btnSearchOpen = new javax.swing.JButton();
        jMenuItem1 = new javax.swing.JMenuItem();
        btngDecodeFolder = new javax.swing.ButtonGroup();
        btngDetect = new javax.swing.ButtonGroup();
        btngHdExt = new javax.swing.ButtonGroup();
        btngHdRename = new javax.swing.ButtonGroup();
        btngHdSearch = new javax.swing.ButtonGroup();
        dialogAbout = new javax.swing.JDialog();
        jButton1 = new javax.swing.JButton();
        pFiles = new javax.swing.JPanel();
        spTools = new javax.swing.JPanel();
        btnFileOpen = new javax.swing.JButton();
        btnFileRemove = new javax.swing.JButton();
        btnFileRemoveall = new javax.swing.JButton();
        cbFileSelectall = new javax.swing.JCheckBox();
        spFilter = new javax.swing.JPanel();
        lbFilterExt = new javax.swing.JLabel();
        rbtnFilterAll = new javax.swing.JRadioButton();
        rbtnFilterOther = new javax.swing.JRadioButton();
        txtfFilterExt = new javax.swing.JTextField();
        cbFilterHidden = new javax.swing.JCheckBox();
        cbFilterFilename = new javax.swing.JCheckBox();
        txtfFilterFilename = new javax.swing.JTextField();
        cbFilterRegex = new javax.swing.JCheckBox();
        txtfFilterRegex = new javax.swing.JTextField();
        separatorFilter = new javax.swing.JSeparator();
        spcard = new javax.swing.JPanel();
        sspDragdrop = new javax.swing.JPanel();
        ssspDragdrop2 = new javax.swing.JPanel();
        lbDragdropFiles = new javax.swing.JLabel();
        lbDragdropUploadicon = new javax.swing.JLabel();
        lbDragdropOr = new javax.swing.JLabel();
        buttonBrowseFile = new javax.swing.JButton();
        sspDragdrop3 = new javax.swing.JPanel();
        sspDragdrop1 = new javax.swing.JPanel();
        sspFilesscroll = new javax.swing.JScrollPane();
        tbFileFiles = new javax.swing.JTable();
        panelFunctions = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        spDecode = new javax.swing.JPanel();
        sspDecode1 = new javax.swing.JPanel();
        lbDecodeSourceencoding = new javax.swing.JLabel();
        cbDecodeSourceencoding = new javax.swing.JComboBox<>();
        lbDecodeArrow = new javax.swing.JLabel();
        lbDecodeTargetencoding = new javax.swing.JLabel();
        cbDecodeTargetencoding = new javax.swing.JComboBox<>();
        separatorDecode = new javax.swing.JSeparator();
        sspDecode2 = new javax.swing.JPanel();
        btnDecodeDecode = new javax.swing.JButton();
        txtfDecodeTargetfolder = new javax.swing.JTextField();
        btnDecodeChoose = new javax.swing.JButton();
        rbtnTargetfolder = new javax.swing.JRadioButton();
        rbtnDecodeOverwrite = new javax.swing.JRadioButton();
        spDetect = new javax.swing.JPanel();
        sspDetect = new javax.swing.JPanel();
        btnDetectSelectencoding = new javax.swing.JButton();
        btnDetectHelp = new javax.swing.JButton();
        btnDetectChoosefile = new javax.swing.JButton();
        lbDetectSample = new javax.swing.JLabel();
        rbtnDetectAuto = new javax.swing.JRadioButton();
        rbtnDetectBrute = new javax.swing.JRadioButton();
        separatorDetect = new javax.swing.JSeparator();
        btnDetectDetect = new javax.swing.JButton();
        lbDetectSamplesize = new javax.swing.JLabel();
        lbDetectChoosesample = new javax.swing.JLabel();
        txtfDetectSamplesize = new JFormattedTextField(getNumberformatter());
        jScrollPane6 = new javax.swing.JScrollPane();
        txtareaDetectSelectedencodings = new javax.swing.JTextArea();
        spHd = new javax.swing.JPanel();
        sspHdExt = new javax.swing.JPanel();
        lbhdExtExt = new javax.swing.JLabel();
        rbtnHdExtAll = new javax.swing.JRadioButton();
        rbtnHdExtOther = new javax.swing.JRadioButton();
        txtfHdExtOther = new javax.swing.JTextField();
        lbHdExtArrow = new javax.swing.JLabel();
        lbHdExtTarget = new javax.swing.JLabel();
        txtfHdExtTarget = new javax.swing.JTextField();
        btnHdExtChange = new javax.swing.JButton();
        separatorHdExt = new javax.swing.JSeparator();
        sspHdrename = new javax.swing.JPanel();
        lbHdRename = new javax.swing.JLabel();
        rbtnHdRenameall = new javax.swing.JRadioButton();
        rbtnHdReplace = new javax.swing.JRadioButton();
        txtfRenameReplace = new javax.swing.JTextField();
        lbHdRenameArrow = new javax.swing.JLabel();
        txtfHdRenameTarget = new javax.swing.JTextField();
        separatorHdRename = new javax.swing.JSeparator();
        btnHdRenameRename = new javax.swing.JButton();
        lbHdRenameTarget = new javax.swing.JLabel();
        cbHdRenameRegex = new javax.swing.JCheckBox();
        sspHdSearch = new javax.swing.JPanel();
        lbHdSearch = new javax.swing.JLabel();
        btnHdSearchSearch = new javax.swing.JButton();
        lbHdSearchSearchby = new javax.swing.JLabel();
        rbtnHdSearchText = new javax.swing.JRadioButton();
        rbtnHdSearchRegex = new javax.swing.JRadioButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtareaHdSearch = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuEdit = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        dgSelectencoding.setTitle("Select Encodings");
        dgSelectencoding.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dgSelectencoding.setFocusCycleRoot(false);
        dgSelectencoding.setModal(true);
        dgSelectencoding.setPreferredSize(new java.awt.Dimension(310, 500));
        dgSelectencoding.setSize(new java.awt.Dimension(310, 500));
        dgSelectencoding.setType(java.awt.Window.Type.POPUP);

        tbSelectencoding.setAutoCreateRowSorter(true);
        tbSelectencoding.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbSelectencoding);
        if (tbSelectencoding.getColumnModel().getColumnCount() > 0) {
            tbSelectencoding.getColumnModel().getColumn(0).setResizable(false);
            tbSelectencoding.getColumnModel().getColumn(1).setMinWidth(50);
            tbSelectencoding.getColumnModel().getColumn(1).setPreferredWidth(30);
            tbSelectencoding.getColumnModel().getColumn(1).setMaxWidth(50);
        }
        setTableEncoding();

        btnSelectencodingOk.setText("OK");
        btnSelectencodingOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectencodingOkActionPerformed(evt);
            }
        });

        btnSelectencodingCancel.setText("Cancel");
        btnSelectencodingCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectencodingCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pSelectencodingLayout = new javax.swing.GroupLayout(pSelectencoding);
        pSelectencoding.setLayout(pSelectencodingLayout);
        pSelectencodingLayout.setHorizontalGroup(
            pSelectencodingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pSelectencodingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pSelectencodingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pSelectencodingLayout.createSequentialGroup()
                        .addGap(0, 148, Short.MAX_VALUE)
                        .addComponent(btnSelectencodingOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectencodingCancel)))
                .addContainerGap())
        );
        pSelectencodingLayout.setVerticalGroup(
            pSelectencodingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pSelectencodingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, Short.MAX_VALUE)
                .addGroup(pSelectencodingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectencodingOk)
                    .addComponent(btnSelectencodingCancel))
                .addContainerGap())
        );

        javax.swing.GroupLayout dgSelectencodingLayout = new javax.swing.GroupLayout(dgSelectencoding.getContentPane());
        dgSelectencoding.getContentPane().setLayout(dgSelectencodingLayout);
        dgSelectencodingLayout.setHorizontalGroup(
            dgSelectencodingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pSelectencoding, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dgSelectencodingLayout.setVerticalGroup(
            dgSelectencodingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pSelectencoding, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        dgSelectencoding.getAccessibleContext().setAccessibleDescription("");
        dgSelectencoding.getAccessibleContext().setAccessibleParent(this);
        dgSelectencoding.setLocationRelativeTo(this);

        dgAuto.setTitle("Result");
        dgAuto.setAlwaysOnTop(true);
        dgAuto.setModal(true);
        dgAuto.setType(java.awt.Window.Type.POPUP);

        lbAutoSuggested.setText("Suggested source Encoding:");

        lbAutoEncoding.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbAutoEncoding.setText("jLabel10");

        btnAutoHelp.setText("help");

        txtaAutoEncodings.setEditable(false);
        txtaAutoEncodings.setColumns(20);
        txtaAutoEncodings.setRows(5);
        jScrollPane3.setViewportView(txtaAutoEncodings);

        lbAutoSample.setText("Sample Text");

        btnAutoOk.setText("OK");
        btnAutoOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pAutoLayout = new javax.swing.GroupLayout(pAuto);
        pAuto.setLayout(pAutoLayout);
        pAutoLayout.setHorizontalGroup(
            pAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAutoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pAutoLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lbAutoSample)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pAutoLayout.createSequentialGroup()
                        .addGroup(pAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                            .addGroup(pAutoLayout.createSequentialGroup()
                                .addComponent(lbAutoSuggested)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbAutoEncoding)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAutoHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pAutoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAutoOk)
                .addContainerGap())
        );
        pAutoLayout.setVerticalGroup(
            pAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pAutoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbAutoSuggested)
                    .addComponent(lbAutoEncoding)
                    .addComponent(btnAutoHelp))
                .addGap(7, 7, 7)
                .addComponent(lbAutoSample)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAutoOk)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout dgAutoLayout = new javax.swing.GroupLayout(dgAuto.getContentPane());
        dgAuto.getContentPane().setLayout(dgAutoLayout);
        dgAutoLayout.setHorizontalGroup(
            dgAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pAuto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dgAutoLayout.setVerticalGroup(
            dgAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pAuto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        dgAuto.pack();
        dgAuto.setLocationRelativeTo(null);

        dgBrute.setTitle("Result");
        dgBrute.setAlwaysOnTop(true);
        dgBrute.setModal(true);
        dgBrute.setType(java.awt.Window.Type.POPUP);

        txtaBruteEncodings.setEditable(false);
        txtaBruteEncodings.setColumns(20);
        txtaBruteEncodings.setRows(5);
        jScrollPane4.setViewportView(txtaBruteEncodings);

        btnBruteOk.setText("OK");
        btnBruteOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBruteOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pBruteLayout = new javax.swing.GroupLayout(pBrute);
        pBrute.setLayout(pBruteLayout);
        pBruteLayout.setHorizontalGroup(
            pBruteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pBruteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pBruteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pBruteLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnBruteOk)))
                .addContainerGap())
        );
        pBruteLayout.setVerticalGroup(
            pBruteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pBruteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBruteOk)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout dgBruteLayout = new javax.swing.GroupLayout(dgBrute.getContentPane());
        dgBrute.getContentPane().setLayout(dgBruteLayout);
        dgBruteLayout.setHorizontalGroup(
            dgBruteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pBrute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dgBruteLayout.setVerticalGroup(
            dgBruteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pBrute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        dgBrute.pack();
        dgBrute.setLocationRelativeTo(null);

        dgSearch.setTitle("Result");
        dgSearch.setAlwaysOnTop(true);
        dgSearch.setModal(true);
        dgSearch.setType(java.awt.Window.Type.POPUP);

        btnSearchCancel.setText("Cancel");
        btnSearchCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCancelActionPerformed(evt);
            }
        });

        lbSearchContaining.setText("Files containing : \"asdfasdfasdfdfasd\"");

        tbSearchFiles.setAutoCreateRowSorter(true);
        tbSearchFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type", "Date modified", "Size", " "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbSearchFiles.setToolTipText("");
        tbSearchFiles.setColumnSelectionAllowed(true);
        tbSearchFiles.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tbSearchFiles.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tbSearchFiles.setShowGrid(false);
        tbSearchFiles.setShowHorizontalLines(true);
        tbSearchFiles.getTableHeader().setReorderingAllowed(false);
        subPanelFilesScroll1.setViewportView(tbSearchFiles);
        tbSearchFiles.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (tbSearchFiles.getColumnModel().getColumnCount() > 0) {
            tbSearchFiles.getColumnModel().getColumn(0).setPreferredWidth(300);
            tbSearchFiles.getColumnModel().getColumn(1).setPreferredWidth(50);
            tbSearchFiles.getColumnModel().getColumn(2).setPreferredWidth(150);
            tbSearchFiles.getColumnModel().getColumn(3).setPreferredWidth(50);
            tbSearchFiles.getColumnModel().getColumn(4).setResizable(false);
            tbSearchFiles.getColumnModel().getColumn(4).setPreferredWidth(20);
        }

        btnSearchOpen.setText("Open");
        btnSearchOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchOpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pSearchLayout = new javax.swing.GroupLayout(pSearch);
        pSearch.setLayout(pSearchLayout);
        pSearchLayout.setHorizontalGroup(
            pSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subPanelFilesScroll1, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                    .addGroup(pSearchLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSearchCancel))
                    .addGroup(pSearchLayout.createSequentialGroup()
                        .addComponent(lbSearchContaining)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearchOpen)))
                .addContainerGap())
        );
        pSearchLayout.setVerticalGroup(
            pSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbSearchContaining)
                    .addComponent(btnSearchOpen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subPanelFilesScroll1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSearchCancel)
                .addContainerGap())
        );

        javax.swing.GroupLayout dgSearchLayout = new javax.swing.GroupLayout(dgSearch.getContentPane());
        dgSearch.getContentPane().setLayout(dgSearchLayout);
        dgSearchLayout.setHorizontalGroup(
            dgSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dgSearchLayout.setVerticalGroup(
            dgSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        dgSearch.pack();
        dgSearch.setLocationRelativeTo(null);

        jMenuItem1.setText("jMenuItem1");

        jButton1.setText("Source code: https://github.com/nicolaslee2000/File-Decoder.git");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogAboutLayout = new javax.swing.GroupLayout(dialogAbout.getContentPane());
        dialogAbout.getContentPane().setLayout(dialogAboutLayout);
        dialogAboutLayout.setHorizontalGroup(
            dialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogAboutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );
        dialogAboutLayout.setVerticalGroup(
            dialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogAboutLayout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(143, Short.MAX_VALUE))
        );

        dialogAbout.pack();
        dialogAbout.setLocationRelativeTo(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("File Decoder\n");
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(530, 550));

        btnFileOpen.setText("Open File..");
        btnFileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileOpenActionPerformed(evt);
            }
        });

        btnFileRemove.setText("Remove");
        btnFileRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileRemoveActionPerformed(evt);
            }
        });

        btnFileRemoveall.setText("Remove All");
        btnFileRemoveall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileRemoveallActionPerformed(evt);
            }
        });

        cbFileSelectall.setText("Select All");
        cbFileSelectall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFileSelectallActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout spToolsLayout = new javax.swing.GroupLayout(spTools);
        spTools.setLayout(spToolsLayout);
        spToolsLayout.setHorizontalGroup(
            spToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spToolsLayout.createSequentialGroup()
                .addComponent(btnFileOpen)
                .addGap(34, 34, 34)
                .addComponent(btnFileRemove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFileRemoveall)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbFileSelectall)
                .addContainerGap())
        );
        spToolsLayout.setVerticalGroup(
            spToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spToolsLayout.createSequentialGroup()
                .addGroup(spToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFileOpen)
                    .addComponent(btnFileRemoveall)
                    .addComponent(btnFileRemove)
                    .addComponent(cbFileSelectall))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        spFilter.setBorder(javax.swing.BorderFactory.createTitledBorder("File filters\n"));

        lbFilterExt.setText("Extension:");

        btngFilterExt.add(rbtnFilterAll);
        rbtnFilterAll.setSelected(true);
        rbtnFilterAll.setText("All");
        rbtnFilterAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnFilterAllActionPerformed(evt);
            }
        });

        btngFilterExt.add(rbtnFilterOther);
        rbtnFilterOther.setText("Other:");
        rbtnFilterOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnFilterOtherActionPerformed(evt);
            }
        });

        txtfFilterExt.setForeground(java.awt.Color.lightGray);
        txtfFilterExt.setText("txt");
        txtfFilterExt.setToolTipText("");
        txtfFilterExt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtfFilterExtFocusGained(evt);
            }
        });
        txtfFilterExt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfFilterExtActionPerformed(evt);
            }
        });

        cbFilterHidden.setSelected(true);
        cbFilterHidden.setText("Hidden files");
        cbFilterHidden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFilterHiddenActionPerformed(evt);
            }
        });

        cbFilterFilename.setText("File name contains:");
        cbFilterFilename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFilterFilenameActionPerformed(evt);
            }
        });

        txtfFilterFilename.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtfFilterFilenameFocusGained(evt);
            }
        });
        txtfFilterFilename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfFilterFilenameActionPerformed(evt);
            }
        });

        cbFilterRegex.setText("Regex script");
        cbFilterRegex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFilterRegexActionPerformed(evt);
            }
        });

        txtfFilterRegex.setForeground(java.awt.Color.lightGray);
        txtfFilterRegex.setText("ex: \\\\D[a-zA-Z]");
        txtfFilterRegex.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtfFilterRegexFocusGained(evt);
            }
        });
        txtfFilterRegex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfFilterRegexActionPerformed(evt);
            }
        });

        separatorFilter.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout spFilterLayout = new javax.swing.GroupLayout(spFilter);
        spFilter.setLayout(spFilterLayout);
        spFilterLayout.setHorizontalGroup(
            spFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbFilterExt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(spFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbtnFilterAll)
                    .addGroup(spFilterLayout.createSequentialGroup()
                        .addComponent(rbtnFilterOther)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfFilterExt, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addGroup(spFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(spFilterLayout.createSequentialGroup()
                        .addComponent(cbFilterFilename)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfFilterFilename))
                    .addComponent(cbFilterHidden))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separatorFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(spFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(spFilterLayout.createSequentialGroup()
                        .addComponent(cbFilterRegex)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtfFilterRegex))
                .addContainerGap())
        );
        spFilterLayout.setVerticalGroup(
            spFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spFilterLayout.createSequentialGroup()
                .addGroup(spFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(spFilterLayout.createSequentialGroup()
                        .addGroup(spFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbFilterExt)
                            .addComponent(rbtnFilterAll)
                            .addComponent(cbFilterHidden)
                            .addComponent(cbFilterRegex))
                        .addGroup(spFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(spFilterLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(spFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rbtnFilterOther)
                                    .addComponent(txtfFilterExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbFilterFilename)
                                    .addComponent(txtfFilterFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, spFilterLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtfFilterRegex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2))))
                    .addComponent(separatorFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        spcard.setLayout(new java.awt.CardLayout());

        sspDragdrop.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        sspDragdrop.setToolTipText("");

        ssspDragdrop2.setForeground(new java.awt.Color(255, 255, 255));

        lbDragdropFiles.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbDragdropFiles.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbDragdropFiles.setText("Drag&drop files here");

        lbDragdropUploadicon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/dropfilesicon.png"))); // NOI18N

        lbDragdropOr.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbDragdropOr.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbDragdropOr.setText("or");
        lbDragdropOr.setFocusable(false);
        lbDragdropOr.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        buttonBrowseFile.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        buttonBrowseFile.setForeground(new java.awt.Color(51, 153, 255));
        buttonBrowseFile.setText("Browse Files");
        buttonBrowseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBrowseFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ssspDragdrop2Layout = new javax.swing.GroupLayout(ssspDragdrop2);
        ssspDragdrop2.setLayout(ssspDragdrop2Layout);
        ssspDragdrop2Layout.setHorizontalGroup(
            ssspDragdrop2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ssspDragdrop2Layout.createSequentialGroup()
                .addGroup(ssspDragdrop2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ssspDragdrop2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbDragdropFiles, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))
                    .addGroup(ssspDragdrop2Layout.createSequentialGroup()
                        .addGroup(ssspDragdrop2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ssspDragdrop2Layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(lbDragdropUploadicon))
                            .addGroup(ssspDragdrop2Layout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addComponent(lbDragdropOr, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ssspDragdrop2Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(buttonBrowseFile)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ssspDragdrop2Layout.setVerticalGroup(
            ssspDragdrop2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ssspDragdrop2Layout.createSequentialGroup()
                .addComponent(lbDragdropUploadicon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbDragdropFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbDragdropOr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonBrowseFile)
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout sspDragdrop3Layout = new javax.swing.GroupLayout(sspDragdrop3);
        sspDragdrop3.setLayout(sspDragdrop3Layout);
        sspDragdrop3Layout.setHorizontalGroup(
            sspDragdrop3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 165, Short.MAX_VALUE)
        );
        sspDragdrop3Layout.setVerticalGroup(
            sspDragdrop3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout sspDragdrop1Layout = new javax.swing.GroupLayout(sspDragdrop1);
        sspDragdrop1.setLayout(sspDragdrop1Layout);
        sspDragdrop1Layout.setHorizontalGroup(
            sspDragdrop1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 164, Short.MAX_VALUE)
        );
        sspDragdrop1Layout.setVerticalGroup(
            sspDragdrop1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout sspDragdropLayout = new javax.swing.GroupLayout(sspDragdrop);
        sspDragdrop.setLayout(sspDragdropLayout);
        sspDragdropLayout.setHorizontalGroup(
            sspDragdropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sspDragdropLayout.createSequentialGroup()
                .addComponent(sspDragdrop1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ssspDragdrop2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sspDragdrop3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        sspDragdropLayout.setVerticalGroup(
            sspDragdropLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ssspDragdrop2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sspDragdrop1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sspDragdrop3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        spcard.add(sspDragdrop, "cardDragDrop");

        tbFileFiles.setAutoCreateRowSorter(true);
        tbFileFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type", "Date modified", "Size", " "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbFileFiles.setToolTipText("");
        tbFileFiles.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tbFileFiles.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tbFileFiles.setShowGrid(false);
        tbFileFiles.setShowHorizontalLines(true);
        tbFileFiles.getTableHeader().setReorderingAllowed(false);
        sspFilesscroll.setViewportView(tbFileFiles);
        tbFileFiles.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (tbFileFiles.getColumnModel().getColumnCount() > 0) {
            tbFileFiles.getColumnModel().getColumn(0).setPreferredWidth(300);
            tbFileFiles.getColumnModel().getColumn(1).setPreferredWidth(50);
            tbFileFiles.getColumnModel().getColumn(2).setPreferredWidth(150);
            tbFileFiles.getColumnModel().getColumn(3).setPreferredWidth(50);
            tbFileFiles.getColumnModel().getColumn(4).setResizable(false);
            tbFileFiles.getColumnModel().getColumn(4).setPreferredWidth(20);
        }
        tbFileFiles.getModel().addTableModelListener(new TableModelListener() {
            public void tableChanged(TableModelEvent e){
                updateSelectAllButton();
            }
        });

        spcard.add(sspFilesscroll, "cardFile");

        javax.swing.GroupLayout pFilesLayout = new javax.swing.GroupLayout(pFiles);
        pFiles.setLayout(pFilesLayout);
        pFilesLayout.setHorizontalGroup(
            pFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pFilesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(spcard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spTools, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spFilter, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pFilesLayout.setVerticalGroup(
            pFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pFilesLayout.createSequentialGroup()
                .addComponent(spTools, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spcard, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        addDropDrag(spcard);

        spDecode.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lbDecodeSourceencoding.setText("Source Encoding");

        cbDecodeSourceencoding.setPrototypeDisplayValue("ISO-0000");
        setComboboxEncoding(cbDecodeSourceencoding, "Select...");
        cbDecodeSourceencoding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDecodeSourceencodingActionPerformed(evt);
            }
        });

        lbDecodeArrow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/downarrow.png"))); // NOI18N

        lbDecodeTargetencoding.setText("Target Encoding");

        cbDecodeTargetencoding.setPrototypeDisplayValue("ISO-0000");
        setComboboxEncoding(cbDecodeTargetencoding, null);
        cbDecodeTargetencoding.setSelectedItem((Object) "UTF-8");

        separatorDecode.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout sspDecode1Layout = new javax.swing.GroupLayout(sspDecode1);
        sspDecode1.setLayout(sspDecode1Layout);
        sspDecode1Layout.setHorizontalGroup(
            sspDecode1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sspDecode1Layout.createSequentialGroup()
                .addGroup(sspDecode1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sspDecode1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(sspDecode1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(sspDecode1Layout.createSequentialGroup()
                                .addGroup(sspDecode1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbDecodeSourceencoding)
                                    .addComponent(lbDecodeTargetencoding))
                                .addGap(0, 41, Short.MAX_VALUE))
                            .addComponent(cbDecodeSourceencoding, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbDecodeTargetencoding, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(sspDecode1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(lbDecodeArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(separatorDecode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        sspDecode1Layout.setVerticalGroup(
            sspDecode1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sspDecode1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sspDecode1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(separatorDecode)
                    .addGroup(sspDecode1Layout.createSequentialGroup()
                        .addComponent(lbDecodeSourceencoding)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbDecodeSourceencoding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbDecodeArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbDecodeTargetencoding)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbDecodeTargetencoding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 18, Short.MAX_VALUE)))
                .addContainerGap())
        );

        btnDecodeDecode.setFont(new java.awt.Font("맑은 고딕", 1, 24)); // NOI18N
        btnDecodeDecode.setText("Decode");
        btnDecodeDecode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecodeDecodeActionPerformed(evt);
            }
        });

        txtfDecodeTargetfolder.setText(System.getProperty("user.home") + "\\Desktop\\decoded_files");
        txtfDecodeTargetfolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfDecodeTargetfolderActionPerformed(evt);
            }
        });

        btnDecodeChoose.setText("Choose...");
        btnDecodeChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecodeChooseActionPerformed(evt);
            }
        });

        btngDecodeFolder.add(rbtnTargetfolder);
        rbtnTargetfolder.setSelected(true);
        rbtnTargetfolder.setText("Create copies at");
        rbtnTargetfolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnTargetfolderActionPerformed(evt);
            }
        });

        btngDecodeFolder.add(rbtnDecodeOverwrite);
        rbtnDecodeOverwrite.setText("Overwrite all");
        rbtnDecodeOverwrite.setToolTipText("");
        rbtnDecodeOverwrite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnDecodeOverwriteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sspDecode2Layout = new javax.swing.GroupLayout(sspDecode2);
        sspDecode2.setLayout(sspDecode2Layout);
        sspDecode2Layout.setHorizontalGroup(
            sspDecode2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(sspDecode2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sspDecode2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sspDecode2Layout.createSequentialGroup()
                        .addComponent(txtfDecodeTargetfolder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDecodeChoose))
                    .addGroup(sspDecode2Layout.createSequentialGroup()
                        .addComponent(rbtnTargetfolder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnDecodeOverwrite)
                        .addGap(0, 171, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(sspDecode2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnDecodeDecode, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        sspDecode2Layout.setVerticalGroup(
            sspDecode2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sspDecode2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sspDecode2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnTargetfolder)
                    .addComponent(rbtnDecodeOverwrite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sspDecode2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDecodeChoose)
                    .addComponent(txtfDecodeTargetfolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDecodeDecode, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout spDecodeLayout = new javax.swing.GroupLayout(spDecode);
        spDecode.setLayout(spDecodeLayout);
        spDecodeLayout.setHorizontalGroup(
            spDecodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spDecodeLayout.createSequentialGroup()
                .addComponent(sspDecode1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sspDecode2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        spDecodeLayout.setVerticalGroup(
            spDecodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sspDecode1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sspDecode2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Decode", spDecode);

        spDetect.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        btnDetectSelectencoding.setText("Select Encodings:");
        btnDetectSelectencoding.setEnabled(false);
        btnDetectSelectencoding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetectSelectencodingActionPerformed(evt);
            }
        });

        btnDetectHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/HelpButtonIcon.png"))); // NOI18N
        btnDetectHelp.setToolTipText("<html>It is impossible to know the exact type of encoding used to create a document unless explicitly being told. \n<br>Select automatic detection for possible character encoding of the sample file. If failed to detect encoding,\n<br> select brute force and test sample with multiple encodings to see which is the correct one.");
        btnDetectHelp.setBorder(null);
        btnDetectHelp.setBorderPainted(false);
        btnDetectHelp.setContentAreaFilled(false);

        btnDetectChoosefile.setText("Choose File:");
        btnDetectChoosefile.setEnabled(false);
        btnDetectChoosefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetectChoosefileActionPerformed(evt);
            }
        });

        lbDetectSample.setEnabled(false);

        btngDetect.add(rbtnDetectAuto);
        rbtnDetectAuto.setText("Automatic");
        rbtnDetectAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnDetectAutoActionPerformed(evt);
            }
        });

        btngDetect.add(rbtnDetectBrute);
        rbtnDetectBrute.setText("Brute force");
        rbtnDetectBrute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnDetectBruteActionPerformed(evt);
            }
        });

        btnDetectDetect.setFont(new java.awt.Font("맑은 고딕", 1, 24)); // NOI18N
        btnDetectDetect.setText("Test");
        btnDetectDetect.setEnabled(false);
        btnDetectDetect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetectDetectActionPerformed(evt);
            }
        });

        lbDetectSamplesize.setText("Sample size:");
        lbDetectSamplesize.setEnabled(false);

        lbDetectChoosesample.setText("Choose test sample:");
        lbDetectChoosesample.setEnabled(false);

        txtfDetectSamplesize.setText("100");
        txtfDetectSamplesize.setEnabled(false);

        txtareaDetectSelectedencodings.setColumns(10);
        txtareaDetectSelectedencodings.setRows(5);
        txtareaDetectSelectedencodings.setEnabled(false);
        jScrollPane6.setViewportView(txtareaDetectSelectedencodings);

        javax.swing.GroupLayout sspDetectLayout = new javax.swing.GroupLayout(sspDetect);
        sspDetect.setLayout(sspDetectLayout);
        sspDetectLayout.setHorizontalGroup(
            sspDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sspDetectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sspDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(separatorDetect)
                    .addGroup(sspDetectLayout.createSequentialGroup()
                        .addGroup(sspDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(sspDetectLayout.createSequentialGroup()
                                .addGroup(sspDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnDetectSelectencoding)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(44, 44, 44)
                                .addGroup(sspDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lbDetectChoosesample, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, sspDetectLayout.createSequentialGroup()
                                        .addGroup(sspDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnDetectChoosefile)
                                            .addComponent(lbDetectSamplesize))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(sspDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sspDetectLayout.createSequentialGroup()
                                                .addComponent(txtfDetectSamplesize, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnDetectDetect, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(lbDetectSample, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(sspDetectLayout.createSequentialGroup()
                                .addComponent(rbtnDetectAuto, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbtnDetectBrute, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDetectHelp)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        sspDetectLayout.setVerticalGroup(
            sspDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sspDetectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sspDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnDetectAuto)
                    .addComponent(rbtnDetectBrute)
                    .addComponent(btnDetectHelp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separatorDetect, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sspDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sspDetectLayout.createSequentialGroup()
                        .addComponent(lbDetectChoosesample)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(sspDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDetectChoosefile)
                            .addComponent(lbDetectSample))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(sspDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sspDetectLayout.createSequentialGroup()
                                .addGroup(sspDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbDetectSamplesize)
                                    .addComponent(txtfDetectSamplesize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sspDetectLayout.createSequentialGroup()
                                .addComponent(btnDetectDetect, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(sspDetectLayout.createSequentialGroup()
                        .addComponent(btnDetectSelectencoding)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout spDetectLayout = new javax.swing.GroupLayout(spDetect);
        spDetect.setLayout(spDetectLayout);
        spDetectLayout.setHorizontalGroup(
            spDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sspDetect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        spDetectLayout.setVerticalGroup(
            spDetectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sspDetect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Detect Encoding", spDetect);

        spHd.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lbhdExtExt.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbhdExtExt.setText("Change files extensions");

        btngHdExt.add(rbtnHdExtAll);
        rbtnHdExtAll.setSelected(true);
        rbtnHdExtAll.setText("All");

        btngHdExt.add(rbtnHdExtOther);
        rbtnHdExtOther.setText("Other:");
        rbtnHdExtOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnHdExtOtherActionPerformed(evt);
            }
        });

        txtfHdExtOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfHdExtOtherActionPerformed(evt);
            }
        });

        lbHdExtArrow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/downarrow.png"))); // NOI18N

        lbHdExtTarget.setText("target:");

        btnHdExtChange.setText("Change");
        btnHdExtChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHdExtChangeActionPerformed(evt);
            }
        });

        separatorHdExt.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout sspHdExtLayout = new javax.swing.GroupLayout(sspHdExt);
        sspHdExt.setLayout(sspHdExtLayout);
        sspHdExtLayout.setHorizontalGroup(
            sspHdExtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sspHdExtLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sspHdExtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sspHdExtLayout.createSequentialGroup()
                        .addGroup(sspHdExtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbHdExtArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbhdExtExt)
                            .addComponent(rbtnHdExtAll)
                            .addGroup(sspHdExtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, sspHdExtLayout.createSequentialGroup()
                                    .addGap(23, 23, 23)
                                    .addComponent(lbHdExtTarget)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtfHdExtTarget, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, sspHdExtLayout.createSequentialGroup()
                                    .addComponent(rbtnHdExtOther)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtfHdExtOther, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sspHdExtLayout.createSequentialGroup()
                        .addComponent(btnHdExtChange)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(separatorHdExt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        sspHdExtLayout.setVerticalGroup(
            sspHdExtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sspHdExtLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sspHdExtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(separatorHdExt)
                    .addGroup(sspHdExtLayout.createSequentialGroup()
                        .addComponent(lbhdExtExt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnHdExtAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(sspHdExtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtnHdExtOther)
                            .addComponent(txtfHdExtOther, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbHdExtArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(sspHdExtLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbHdExtTarget)
                            .addComponent(txtfHdExtTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnHdExtChange)))
                .addContainerGap())
        );

        lbHdRename.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbHdRename.setText("Rename files");

        btngHdRename.add(rbtnHdRenameall);
        rbtnHdRenameall.setText("Rename all");
        rbtnHdRenameall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnHdRenameallActionPerformed(evt);
            }
        });

        btngHdRename.add(rbtnHdReplace);
        rbtnHdReplace.setSelected(true);
        rbtnHdReplace.setText("Replace:");
        rbtnHdReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnHdReplaceActionPerformed(evt);
            }
        });

        lbHdRenameArrow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/downarrow.png"))); // NOI18N

        separatorHdRename.setOrientation(javax.swing.SwingConstants.VERTICAL);

        btnHdRenameRename.setText("Rename");
        btnHdRenameRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHdRenameRenameActionPerformed(evt);
            }
        });

        lbHdRenameTarget.setText("With:");

        cbHdRenameRegex.setText("Regex?");

        javax.swing.GroupLayout sspHdrenameLayout = new javax.swing.GroupLayout(sspHdrename);
        sspHdrename.setLayout(sspHdrenameLayout);
        sspHdrenameLayout.setHorizontalGroup(
            sspHdrenameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sspHdrenameLayout.createSequentialGroup()
                .addGroup(sspHdrenameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sspHdrenameLayout.createSequentialGroup()
                        .addComponent(rbtnHdReplace)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfRenameReplace))
                    .addGroup(sspHdrenameLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(lbHdRenameTarget)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtfHdRenameTarget))
                    .addGroup(sspHdrenameLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(btnHdRenameRename))
                    .addGroup(sspHdrenameLayout.createSequentialGroup()
                        .addComponent(cbHdRenameRegex)
                        .addGap(18, 18, 18)
                        .addComponent(lbHdRenameArrow))
                    .addGroup(sspHdrenameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbHdRename))
                    .addComponent(rbtnHdRenameall))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separatorHdRename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        sspHdrenameLayout.setVerticalGroup(
            sspHdrenameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sspHdrenameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sspHdrenameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sspHdrenameLayout.createSequentialGroup()
                        .addComponent(lbHdRename)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnHdRenameall)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(sspHdrenameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtnHdReplace)
                            .addComponent(txtfRenameReplace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(sspHdrenameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbHdRenameArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbHdRenameRegex))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(sspHdrenameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtfHdRenameTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbHdRenameTarget))
                        .addGap(15, 15, 15)
                        .addComponent(btnHdRenameRename))
                    .addComponent(separatorHdRename))
                .addContainerGap())
        );

        lbHdSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbHdSearch.setText("Search file content");

        btnHdSearchSearch.setText("Search");
        btnHdSearchSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHdSearchSearchActionPerformed(evt);
            }
        });

        lbHdSearchSearchby.setText("Search by:");

        btngHdSearch.add(rbtnHdSearchText);
        rbtnHdSearchText.setSelected(true);
        rbtnHdSearchText.setText("Text");

        btngHdSearch.add(rbtnHdSearchRegex);
        rbtnHdSearchRegex.setText("Regex");

        txtareaHdSearch.setColumns(10);
        txtareaHdSearch.setLineWrap(true);
        txtareaHdSearch.setRows(2);
        txtareaHdSearch.setTabSize(3);
        txtareaHdSearch.setWrapStyleWord(true);
        jScrollPane5.setViewportView(txtareaHdSearch);

        javax.swing.GroupLayout sspHdSearchLayout = new javax.swing.GroupLayout(sspHdSearch);
        sspHdSearch.setLayout(sspHdSearchLayout);
        sspHdSearchLayout.setHorizontalGroup(
            sspHdSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sspHdSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sspHdSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sspHdSearchLayout.createSequentialGroup()
                        .addComponent(lbHdSearchSearchby)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(sspHdSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(sspHdSearchLayout.createSequentialGroup()
                                .addComponent(rbtnHdSearchRegex)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(rbtnHdSearchText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sspHdSearchLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnHdSearchSearch))
                    .addGroup(sspHdSearchLayout.createSequentialGroup()
                        .addGroup(sspHdSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbHdSearch)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE))
                        .addGap(11, 11, 11)))
                .addContainerGap())
        );
        sspHdSearchLayout.setVerticalGroup(
            sspHdSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sspHdSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbHdSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sspHdSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbHdSearchSearchby)
                    .addComponent(rbtnHdSearchText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnHdSearchRegex)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5)
                .addGap(12, 12, 12)
                .addComponent(btnHdSearchSearch)
                .addContainerGap())
        );

        javax.swing.GroupLayout spHdLayout = new javax.swing.GroupLayout(spHd);
        spHd.setLayout(spHdLayout);
        spHdLayout.setHorizontalGroup(
            spHdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spHdLayout.createSequentialGroup()
                .addComponent(sspHdExt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sspHdrename, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sspHdSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        spHdLayout.setVerticalGroup(
            spHdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sspHdExt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sspHdSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sspHdrename, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabbedPane.addTab("File Handling", spHd);

        javax.swing.GroupLayout panelFunctionsLayout = new javax.swing.GroupLayout(panelFunctions);
        panelFunctions.setLayout(panelFunctionsLayout);
        panelFunctionsLayout.setHorizontalGroup(
            panelFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFunctionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane)
                .addContainerGap())
        );
        panelFunctionsLayout.setVerticalGroup(
            panelFunctionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFunctionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane))
        );

        menuFile.setText("File");
        menuBar.add(menuFile);

        menuEdit.setText("Edit");
        menuBar.add(menuEdit);

        jMenu1.setText("Help");

        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        menuBar.add(jMenu1);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelFunctions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelFunctions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // <editor-fold defaultstate="collapsed" desc="Listeners">
    
    private void btnFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileOpenActionPerformed
        addFiles(getFilesFromFilechooser(true, JFileChooser.FILES_AND_DIRECTORIES));
    }//GEN-LAST:event_btnFileOpenActionPerformed
    
    private void btnFileRemoveallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileRemoveallActionPerformed
        removeFiles(fileSelect.getFiles()); 
    }//GEN-LAST:event_btnFileRemoveallActionPerformed

    private void btnFileRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileRemoveActionPerformed
        removeSelectedRows();
    }//GEN-LAST:event_btnFileRemoveActionPerformed

    private void buttonBrowseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBrowseFileActionPerformed
        addFiles(getFilesFromFilechooser(true, JFileChooser.FILES_AND_DIRECTORIES));
    }//GEN-LAST:event_buttonBrowseFileActionPerformed

    private void txtfFilterExtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfFilterExtActionPerformed
        rbtnFilterOther.requestFocus();
        rbtnFilterOther.setSelected(true);
        fileSelect.setFilterExt(txtfFilterExt.getText());
        updateTable();
    }//GEN-LAST:event_txtfFilterExtActionPerformed

    private void cbFilterRegexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFilterRegexActionPerformed
        if(cbFilterRegex.isSelected()) {
            txtfFilterRegex.requestFocus();
            fileSelect.setFilterRegex(txtfFilterRegex.getText());
        } else {
            fileSelect.setFilterRegex(".*");
        }
        updateTable();
    }//GEN-LAST:event_cbFilterRegexActionPerformed

    private void btnDecodeDecodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecodeDecodeActionPerformed
        setDecodeButton();
    }//GEN-LAST:event_btnDecodeDecodeActionPerformed

    private void btnDetectSelectencodingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetectSelectencodingActionPerformed
        dgSelectencoding.setVisible(true);
    }//GEN-LAST:event_btnDetectSelectencodingActionPerformed

    private void btnDetectDetectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetectDetectActionPerformed
        setDetectencodingButton();
    }//GEN-LAST:event_btnDetectDetectActionPerformed

    private void btnBruteOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBruteOkActionPerformed
        dgBrute.setVisible(false);
    }//GEN-LAST:event_btnBruteOkActionPerformed

    private void cbDecodeSourceencodingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDecodeSourceencodingActionPerformed
        cbDecodeSourceencoding.removeItemAt(0);
    }//GEN-LAST:event_cbDecodeSourceencodingActionPerformed

    private void btnSearchCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCancelActionPerformed
        dgSearch.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) tbSearchFiles.getModel();
        while(model.getRowCount()>0) {
            model.removeRow(0);
        }
    }//GEN-LAST:event_btnSearchCancelActionPerformed

    private void cbFileSelectallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFileSelectallActionPerformed
        boolean b = !IsSelectedAll();
        for(int i = 0; i < tbFileFiles.getRowCount(); i++){
            tbFileFiles.setValueAt(b, i , 4);
        }
    }//GEN-LAST:event_cbFileSelectallActionPerformed

    private void rbtnFilterAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnFilterAllActionPerformed
        fileSelect.setFilterExt("");
        updateTable();
    }//GEN-LAST:event_rbtnFilterAllActionPerformed

    private void rbtnFilterOtherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnFilterOtherActionPerformed
        txtfFilterExt.requestFocus();
        fileSelect.setFilterExt(txtfFilterExt.getText());
        updateTable();
    }//GEN-LAST:event_rbtnFilterOtherActionPerformed

    private void txtfFilterExtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtfFilterExtFocusGained
        txtfFilterExt.selectAll();
    }//GEN-LAST:event_txtfFilterExtFocusGained

    private void cbFilterHiddenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFilterHiddenActionPerformed
        boolean hidden = cbFilterHidden.isSelected();
        fileSelect.setFilterHidden(hidden);
        updateTable();
    }//GEN-LAST:event_cbFilterHiddenActionPerformed

    private void cbFilterFilenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFilterFilenameActionPerformed
        txtfFilterFilename.requestFocus();
        String text = cbFilterFilename.isSelected() ? txtfFilterFilename.getText() : "";
        fileSelect.setFilterName(text);
        updateTable();
    }//GEN-LAST:event_cbFilterFilenameActionPerformed

    private void txtfFilterFilenameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtfFilterFilenameFocusGained
        txtfFilterFilename.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                update();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                update();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                update();
            }
            private void update() {
                if(cbFilterFilename.isSelected()){
                    fileSelect.setFilterName(txtfFilterFilename.getText());
                updateTable();
                }
            }
        });
    }//GEN-LAST:event_txtfFilterFilenameFocusGained

    private void txtfFilterFilenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfFilterFilenameActionPerformed
        cbFilterFilename.requestFocus();
        cbFilterFilename.setSelected(true);
    }//GEN-LAST:event_txtfFilterFilenameActionPerformed

    private void txtfFilterRegexFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtfFilterRegexFocusGained
        txtfFilterRegex.selectAll();
    }//GEN-LAST:event_txtfFilterRegexFocusGained

    private void txtfFilterRegexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfFilterRegexActionPerformed
        cbFilterRegex.setSelected(true);
        cbFilterRegex.requestFocus();
        fileSelect.setFilterRegex(txtfFilterRegex.getText());
        updateTable();
    }//GEN-LAST:event_txtfFilterRegexActionPerformed

    private void rbtnDecodeOverwriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnDecodeOverwriteActionPerformed
        if(!rbtnDecodeOverwrite.isSelected()) {
            return;
        }
        if(!txtfDecodeTargetfolder.isEnabled()) return;
        String msg = "Decoded files will overwrite original files.\nIf wrong encoding is selected, files\nmay be irreversibly damaged. Confirm?";
        int input = JOptionPane.showConfirmDialog(null, msg, "Overwrite", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        if(input == JOptionPane.OK_OPTION) {
            txtfDecodeTargetfolder.setEnabled(false);
            btnDecodeChoose.setEnabled(false);
        } else {
            rbtnDecodeOverwrite.setSelected(false);
            rbtnTargetfolder.setSelected(true);
        }
    }//GEN-LAST:event_rbtnDecodeOverwriteActionPerformed

    private void txtfDecodeTargetfolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfDecodeTargetfolderActionPerformed
        rbtnTargetfolder.requestFocus();
    }//GEN-LAST:event_txtfDecodeTargetfolderActionPerformed

    private void rbtnTargetfolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnTargetfolderActionPerformed
        txtfDecodeTargetfolder.setEnabled(true);
        btnDecodeChoose.setEnabled(true);
    }//GEN-LAST:event_rbtnTargetfolderActionPerformed

    private void btnDecodeChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecodeChooseActionPerformed
        fileChooser.setCurrentDirectory(new File(txtfDecodeTargetfolder.getText()));
        for(File f : getFilesFromFilechooser(false, JFileChooser.DIRECTORIES_ONLY)) {
            txtfDecodeTargetfolder.setText(f.getAbsolutePath());
        }
    }//GEN-LAST:event_btnDecodeChooseActionPerformed

    private void rbtnDetectAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnDetectAutoActionPerformed
        enableDetectencoding(true);
    }//GEN-LAST:event_rbtnDetectAutoActionPerformed

    private void rbtnDetectBruteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnDetectBruteActionPerformed
       enableDetectencoding(true);
    }//GEN-LAST:event_rbtnDetectBruteActionPerformed

    private void btnDetectChoosefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetectChoosefileActionPerformed
        if(!lbDetectSample.getText().isBlank()) {
            fileChooser.setCurrentDirectory(new File(lbDetectSample.getText().strip()));
        }
        for(File f : getFilesFromFilechooser(false, JFileChooser.FILES_ONLY)){
            lbDetectSample.setText(f.getAbsolutePath());
        }
    }//GEN-LAST:event_btnDetectChoosefileActionPerformed

    private void btnSelectencodingOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectencodingOkActionPerformed
        Set<Charset> cs = new HashSet<>();
        for(int i =0; i < tbSelectencoding.getRowCount(); i++) {
            if((boolean)tbSelectencoding.getValueAt(i, 1)) cs.add(Charset.forName((String)tbSelectencoding.getValueAt(i, 0)));
        }
        if(cs.size()>10&&rbtnDetectBrute.isSelected()) {
            String msg = "For auto-detection, it is recommended that you select less than 10 encodings. Confirm?";
            int input = JOptionPane.showConfirmDialog(null, msg, "", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
            if(input == JOptionPane.CANCEL_OPTION) return;
        }
        String str = "";
        for(Charset c : cs) {
            str += c.displayName() + "\n";
        }
        txtareaDetectSelectedencodings.setText(str);
        dgSelectencoding.setVisible(false);
    }//GEN-LAST:event_btnSelectencodingOkActionPerformed

    private void btnSelectencodingCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectencodingCancelActionPerformed
        dgSelectencoding.setVisible(false);
    }//GEN-LAST:event_btnSelectencodingCancelActionPerformed

    private void btnAutoOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoOkActionPerformed
        dgAuto.setVisible(false);
    }//GEN-LAST:event_btnAutoOkActionPerformed

    private void rbtnHdExtOtherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnHdExtOtherActionPerformed
        txtfHdExtOther.requestFocus();
    }//GEN-LAST:event_rbtnHdExtOtherActionPerformed

    private void txtfHdExtOtherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfHdExtOtherActionPerformed
        rbtnFilterOther.requestFocus();
        rbtnFilterOther.setSelected(true);
    }//GEN-LAST:event_txtfHdExtOtherActionPerformed

    private void btnHdExtChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHdExtChangeActionPerformed
        setChangeFileExtButton();
    }//GEN-LAST:event_btnHdExtChangeActionPerformed

    private void rbtnHdRenameallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnHdRenameallActionPerformed
        String msg = "If more than one file of same name exists,\nonly first file will be renamed.\nConfirm?";
        int input = JOptionPane.showConfirmDialog(null, msg, "", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        if(input == JOptionPane.CANCEL_OPTION) {
            rbtnHdReplace.setSelected(true);
            return;
        }
        txtfRenameReplace.setEnabled(false);
        cbHdRenameRegex.setEnabled(false);
    }//GEN-LAST:event_rbtnHdRenameallActionPerformed

    private void rbtnHdReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnHdReplaceActionPerformed
        txtfRenameReplace.requestFocus();
        txtfRenameReplace.setEnabled(true);
        cbHdRenameRegex.setEnabled(true);
    }//GEN-LAST:event_rbtnHdReplaceActionPerformed

    private void btnHdRenameRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHdRenameRenameActionPerformed
        setRenameButton();
    }//GEN-LAST:event_btnHdRenameRenameActionPerformed

    private void btnHdSearchSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHdSearchSearchActionPerformed
        setSearchfilecontentButton();
    }//GEN-LAST:event_btnHdSearchSearchActionPerformed

    private void btnSearchOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchOpenActionPerformed
        Set<File> files = new HashSet<>();
        for(int i = 0; i < tbSearchFiles.getRowCount(); i++) {
            if((boolean)tbSearchFiles.getValueAt(i, 4))
                files.add(new File((String)tbFileFiles.getValueAt(i, 0)));
        }
        Desktop desktop = Desktop.getDesktop();
        for(File f : files) {
            if(f.exists()&&Desktop.isDesktopSupported()) {
                try {
                    desktop.open(f);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            } else {
                joptionWarning("UNSUPPORTED");
            }
        }
    }//GEN-LAST:event_btnSearchOpenActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        dialogAbout.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        if (Desktop.isDesktopSupported()) {
            try {
                URI uri = new URI("https://github.com/nicolaslee2000/File-Decoder.git");
                Desktop.getDesktop().browse(uri);
            } catch (IOException e) {
                e.printStackTrace();
            } catch (URISyntaxException ex) {
                ex.printStackTrace();
            }
        } else {
            joptionWarning("UNSUPPORTED");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    // </editor-fold>
    private void joptionWarning(String str) {
        JOptionPane.showMessageDialog(null, str, null, JOptionPane.WARNING_MESSAGE);
    }
    
    private void setSearchfilecontentButton(){
        if(txtareaHdSearch.getText().isBlank()) {
            joptionWarning("Fill in text to search!");
            return;
        }
        lbSearchContaining.setText("Files containing: " + txtareaHdSearch.getText().strip());
        DefaultTableModel model = (DefaultTableModel) tbSearchFiles.getModel();
        Set<File> files  = new HashSet<>();
        try {
            files.addAll(getSelectedFiles());
        } catch(NullPointerException e) {
            return;
        }
        Set<File> resultfiles = fileHandler.searchFilecontent(files, txtareaHdSearch.getText().strip(), rbtnHdSearchRegex.isSelected());
        for(File f : resultfiles){
            DateFormat df = new SimpleDateFormat("dd/MM/yy  HH:mm:ss");
                String name = f.getAbsolutePath();
                String type = f.getName().contains(".") ?  f.getAbsolutePath().substring(f.getAbsolutePath().lastIndexOf(".")) : "ddd";
                //shouldve chosen nio
                String date = df.format(f.lastModified());
                String size = f.length() < 1000 && f.length() != 0 ? 1 + "KB"  :  String.valueOf(f.length()/1000l) + "KB";
                model.addRow(new Object[]{name, type, date, size, true});
        }
        
        dgSearch.setVisible(true);
    }
    
    private void setRenameButton() {
        if(rbtnHdReplace.isSelected()&&txtfRenameReplace.getText().isBlank()){
            joptionWarning("Fill in what you want to replace with!");
            return;
        }
        if(txtfHdRenameTarget.getText().isBlank()) {
            joptionWarning("Fill in target name!");
            return;
        }
        try {
            fileHandler.rename(getSelectedFiles(), rbtnHdRenameall.isSelected() ? null : txtfRenameReplace.getText().strip(), txtfHdRenameTarget.getText().strip(), cbHdRenameRegex.isSelected());
        } catch(NullPointerException e) {
            return;
        }
        JOptionPane.showMessageDialog(null, "Complete!", "Complete!", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void setChangeFileExtButton() {
        if(txtfHdExtOther.getText().strip().equals("")&&rbtnHdExtOther.isSelected() || txtfHdExtTarget.getText().strip().equals("")) {
            joptionWarning("Choose extension!");
            return;
        }
        Set<File> files = new HashSet<>();
        Set<File> tempf = new HashSet<>();
        try {
            files.addAll(getSelectedFiles());
        } catch(NullPointerException e) {
            return;
        }
        for(File f : files){
            if(!f.getName().contains("." + txtfHdExtOther.getText().strip()))
                tempf.add(f);
        }
        files.removeAll(tempf);
        System.out.println("FILEs"+files);
        System.out.println("ext"+txtfHdExtTarget.getText().strip());
        fileHandler.changeExtension(files, txtfHdExtTarget.getText().strip());
         JOptionPane.showMessageDialog(null, "Complete!", "Complete!", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private Set<File> getSelectedFiles() {
        Set<File> files = new HashSet<>();
        for(int i = 0; i < tbFileFiles.getRowCount(); i++) {
            if((boolean)tbFileFiles.getValueAt(i, 4)) 
                files.add(new File((String)tbFileFiles.getValueAt(i, 0)));    
        }
        if(files.isEmpty()) {
            joptionWarning("Select files!");
            throw new NullPointerException();
        }
        for(File f : files) {
            if(!f.exists()) {
                joptionWarning(f.getAbsolutePath()+" does not exist!");
                files.clear();
                throw new NullPointerException();
            }
        }
        return files;
    }
    
    private void setTableEncoding() {
        DefaultTableModel model = (DefaultTableModel) tbSelectencoding.getModel();
        for(String s : decoder.getAvailableCharsets().keySet()) {
            model.addRow(new Object[]{s, "UTF-8".equals(s)});
        }
        tbSelectencoding.getRowSorter().toggleSortOrder(1);
        tbSelectencoding.getRowSorter().toggleSortOrder(1);
    }
    
    private void setDetectencodingButton() {
        boolean auto = rbtnDetectAuto.isSelected();
        Set<Charset> csTobeTested;
        File sample;
        int size;
        
        if(txtareaDetectSelectedencodings.getText().isBlank()) {
            joptionWarning("Select Encodings to Test!");
            return;
        }
        csTobeTested = new HashSet<>();
        for(String s : txtareaDetectSelectedencodings.getText().split("\n")){
            csTobeTested.add(Charset.forName(s));
        }
        
        if(lbDetectSample.getText().isBlank()) {
            joptionWarning("Select sample file!");
            return;
        }
        sample = new File(lbDetectSample.getText());
        if(!sample.exists()) {
            joptionWarning("Sample File does not exists!");
            return;
        }
        
        size = Integer.parseInt(txtfDetectSamplesize.getText().strip());
        
        if(auto) {
            Set<Charset> c = new HashSet<>();
            c.add(decoder.detectEncodingAutomatic(sample, csTobeTested));
            c.forEach(e -> lbAutoEncoding.setText(e.displayName()));
            txtaAutoEncodings.setText(decoder.detectEncodingBruteforce(sample, c, size));
            dgAuto.setVisible(true);
        } else {
            txtaBruteEncodings.setText(decoder.detectEncodingBruteforce(sample, csTobeTested, size));
            dgBrute.setVisible(true);
        }
    }
    
    private NumberFormatter getNumberformatter() {
        NumberFormat format = NumberFormat.getInstance();
        NumberFormatter formatter = new NumberFormatter(format);
        formatter.setValueClass(Integer.class);
        formatter.setMinimum(0);
        formatter.setMaximum(Integer.MAX_VALUE);
        formatter.setAllowsInvalid(false);
        formatter.setCommitsOnValidEdit(true);
        return formatter;
    }
    
    private void enableDetectencoding(boolean enable) {
        btnDetectSelectencoding.setEnabled(enable);
        txtareaDetectSelectedencodings.setEnabled(enable);
        lbDetectChoosesample.setEnabled(enable);
        btnDetectChoosefile.setEnabled(enable);
        lbDetectSample.setEnabled(enable);
        lbDetectSamplesize.setEnabled(enable);
        txtfDetectSamplesize.setEnabled(enable);
        btnDetectDetect.setEnabled(enable);
    }
    
    private void setDecodeButton() {
        Set<File> files = new HashSet<>();
        Charset sourceCs;
        Charset targetCs;
        try {
            files.addAll(getSelectedFiles());
        } catch(NullPointerException e) {
            return;
        }
        
        if(cbDecodeSourceencoding.getSelectedItem() == "Select...") {
            joptionWarning("Select source Encoding!");
            return;
        }
        sourceCs = Charset.forName((String)cbDecodeSourceencoding.getSelectedItem());
        targetCs = Charset.forName((String)cbDecodeTargetencoding.getSelectedItem());
        
        for(File f : files) {
            if(rbtnDecodeOverwrite.isSelected()) {
                decoder.decode(f, f, sourceCs, targetCs);
                return;
            } 
            File target = new File(txtfDecodeTargetfolder.getText().strip());
            if(!target.mkdirs()) {
                joptionWarning("Invalid target folder!");
                return;
            }
            File temp = new File(target, f.getName());
            try {
                temp.createNewFile();
            } catch (IOException e) {
                joptionWarning("FILE NOT CREATED");
            }
            decoder.decode(f, temp, sourceCs, targetCs);
        }
       
        JOptionPane.showMessageDialog(null, "Decoding complete!", "Complete!", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void setComboboxEncoding(JComboBox box, String defaulttext) {
        if(defaulttext!=null) box.addItem(defaulttext);
        decoder.getAvailableCharsets().keySet().forEach(e -> box.addItem(e));
    }
    
    private void updateSelectAllButton() {
        cbFileSelectall.setSelected(IsSelectedAll());
    }
    
    private boolean IsSelectedAll() {
        for(int i = 0; i < tbFileFiles.getRowCount()-1; i++){
            if((boolean)tbFileFiles.getValueAt(i, 4) == false) {
                return false;
            }
        }
        return true;
    }
    
    private void removeSelectedRows() {
        Set<File> files = new HashSet<>();
        int rownum = tbFileFiles.getRowCount();
        for(int i : tbFileFiles.getSelectedRows()){
            files.add(new File((String)tbFileFiles.getValueAt(i, 0)));
            rownum = i < rownum ? i : rownum;
        }
        removeFiles(files);
        if(rownum==0) return;
        tbFileFiles.setRowSelectionInterval(rownum-1, rownum-1);
    }
    
    private Set<File> getFilesFromFilechooser(boolean multiSelect, int mode) {
        fileChooser.setMultiSelectionEnabled(multiSelect);
        fileChooser.setFileSelectionMode(mode);
        Set<File> set = new HashSet<>();
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            set.addAll(Set.of(fileChooser.getSelectedFiles()));
            if(!multiSelect) set.add(fileChooser.getSelectedFile());
        }
        fileChooser.setCurrentDirectory(fileChooser.getCurrentDirectory());
        return set;
    }
    
    private void updateCards() {
        String currentCard = fileSelect.getFiles().isEmpty() ? "cardDragDrop" : "cardFile";
        CardLayout c = (CardLayout) spcard.getLayout();
        c.show(spcard, currentCard);
    }
    
    private void updateSamplefile() {
        //calculation to divide file name label so that it does not go out of border
        if(tbFileFiles.getRowCount()>0) {
            File sample = new File((String) tbFileFiles.getValueAt(0, 0));
            String str = "<html><p style=\"width:170px\">"+sample.getAbsolutePath()+"</p></html>";
            lbDetectSample.setText(str);
        }
    }
    
    private void updateTable() {
        DefaultTableModel model = (DefaultTableModel) tbFileFiles.getModel();
        Set<File> newfiles = new HashSet<>();
        Set<File> deletedfiles = new HashSet<>();
        for(int i = 0; i < model.getRowCount(); i++) {
            deletedfiles.add(new File((String)model.getValueAt(i, 0)));
        }
        newfiles.addAll(fileSelect.getFiles());
        newfiles.removeAll(deletedfiles);
        deletedfiles.removeAll(fileSelect.getFiles());
        
        for(File f : newfiles){
            DateFormat df = new SimpleDateFormat("dd/MM/yy  HH:mm:ss");
                String name = f.getAbsolutePath();
                String type = f.getName().contains(".") ?  f.getAbsolutePath().substring(f.getAbsolutePath().lastIndexOf(".")) : "";
                //shouldve chosen nio
                String date = df.format(f.lastModified());
                String size = f.length() < 1000 && f.length() != 0 ? 1 + "KB"  :  String.valueOf(f.length()/1000l) + "KB";
                model.addRow(new Object[]{name, type, date, size, true});
        }
        for(File f : deletedfiles){
            for(int i = 0; i < model.getRowCount(); i++) {
                    if(model.getValueAt(i, 0) == f.getAbsolutePath()) model.removeRow(i);
                }
        }
        //automatically displaying first file as sample file at detect encoding panel.
        updateSamplefile();
        updateCards();
    }
    
    private void addDropDrag(Component component) {
        new DropTarget(component, new DropTargetListener() {
            @Override
            public void dragEnter(DropTargetDragEvent dtde) {
                grayfilterPanelDragDrop(true);
                toFront();
            }

            @Override
            public void dragOver(DropTargetDragEvent dtde) {
            }

            @Override
            public void dropActionChanged(DropTargetDragEvent dtde) {
            }

            @Override
            public void dragExit(DropTargetEvent dte) {
                grayfilterPanelDragDrop(false);
            }

            @Override
            public void drop(DropTargetDropEvent dtde) {
                grayfilterPanelDragDrop(false);
                dtde.acceptDrop(DnDConstants.ACTION_COPY);
                Transferable transferable = dtde.getTransferable();
                DataFlavor[] flavors = transferable.getTransferDataFlavors();
                Set<File> files = new HashSet<>();
                for (DataFlavor f : flavors){
                    if(f.isFlavorJavaFileListType()){
                        try {
                            files.addAll((List)transferable.getTransferData(f));
                        } catch (UnsupportedFlavorException | IOException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
                addFiles(files);
                dtde.dropComplete(true);
            }
        });
    }
    
    private void grayfilterPanelDragDrop(boolean b) {
        if(b){
            sspDragdrop1.setBackground(new Color(230, 230, 230));
            ssspDragdrop2.setBackground(new Color(230, 230, 230));
            sspDragdrop3.setBackground(new Color(230, 230, 230));
            sspDragdrop.setBackground(new Color(230,230,230));
            
            lbDragdropFiles.setEnabled(false);
            lbDragdropUploadicon.setEnabled(false);
            lbDragdropOr.setEnabled(false);
            buttonBrowseFile.setEnabled(false);
        } else {
            sspDragdrop1.setBackground(new Color(242, 242, 242));
            ssspDragdrop2.setBackground(new Color(242, 242, 242));
            sspDragdrop3.setBackground(new Color(242, 242, 242));
            sspDragdrop.setBackground(new Color(242,242,242));
            
            lbDragdropFiles.setEnabled(true);
            lbDragdropUploadicon.setEnabled(true);
            lbDragdropOr.setEnabled(true);
            buttonBrowseFile.setEnabled(true);
        }
    }
    
    private void removeFiles(Set<File> files) {
        Set<File> f = new HashSet<>();
        f.addAll(files);
        fileSelect.removeFiles(f);
        updateTable();
    }
    
    private void addFiles(Set<File> files) {
        fileSelect.addFiles(files);
        updateTable();
    }
    
    private void initFileSelect() {
        fileSelect = new FileSelect();
        fileSelect.setFilterExt("");
        fileSelect.setFilterHidden(true);
        fileSelect.setFilterName("");
        fileSelect.setFilterRegex(".*");
    }
    
    private void initFileHandler() {
        fileHandler = new FileHandler();
    }
    
    private void initDecoder() {
        decoder = new Decoder();
    }
    /**
     * @param args the command line arguments
     */
//<editor-fold defaultstate="collapsed" desc="Variable declaration">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAutoHelp;
    private javax.swing.JButton btnAutoOk;
    private javax.swing.JButton btnBruteOk;
    private javax.swing.JButton btnDecodeChoose;
    private javax.swing.JButton btnDecodeDecode;
    private javax.swing.JButton btnDetectChoosefile;
    private javax.swing.JButton btnDetectDetect;
    private javax.swing.JButton btnDetectHelp;
    private javax.swing.JButton btnDetectSelectencoding;
    private javax.swing.JButton btnFileOpen;
    private javax.swing.JButton btnFileRemove;
    private javax.swing.JButton btnFileRemoveall;
    private javax.swing.JButton btnHdExtChange;
    private javax.swing.JButton btnHdRenameRename;
    private javax.swing.JButton btnHdSearchSearch;
    private javax.swing.JButton btnSearchCancel;
    private javax.swing.JButton btnSearchOpen;
    private javax.swing.JButton btnSelectencodingCancel;
    private javax.swing.JButton btnSelectencodingOk;
    private javax.swing.ButtonGroup btngDecodeFolder;
    private javax.swing.ButtonGroup btngDetect;
    private javax.swing.ButtonGroup btngFilterExt;
    private javax.swing.ButtonGroup btngHdExt;
    private javax.swing.ButtonGroup btngHdRename;
    private javax.swing.ButtonGroup btngHdSearch;
    private javax.swing.JButton buttonBrowseFile;
    private javax.swing.JComboBox<String> cbDecodeSourceencoding;
    private javax.swing.JComboBox<String> cbDecodeTargetencoding;
    private javax.swing.JCheckBox cbFileSelectall;
    private javax.swing.JCheckBox cbFilterFilename;
    private javax.swing.JCheckBox cbFilterHidden;
    private javax.swing.JCheckBox cbFilterRegex;
    private javax.swing.JCheckBox cbHdRenameRegex;
    private javax.swing.JDialog dgAuto;
    private javax.swing.JDialog dgBrute;
    private javax.swing.JDialog dgSearch;
    private javax.swing.JDialog dgSelectencoding;
    private javax.swing.JDialog dialogAbout;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lbAutoEncoding;
    private javax.swing.JLabel lbAutoSample;
    private javax.swing.JLabel lbAutoSuggested;
    private javax.swing.JLabel lbDecodeArrow;
    private javax.swing.JLabel lbDecodeSourceencoding;
    private javax.swing.JLabel lbDecodeTargetencoding;
    private javax.swing.JLabel lbDetectChoosesample;
    private javax.swing.JLabel lbDetectSample;
    private javax.swing.JLabel lbDetectSamplesize;
    private javax.swing.JLabel lbDragdropFiles;
    private javax.swing.JLabel lbDragdropOr;
    private javax.swing.JLabel lbDragdropUploadicon;
    private javax.swing.JLabel lbFilterExt;
    private javax.swing.JLabel lbHdExtArrow;
    private javax.swing.JLabel lbHdExtTarget;
    private javax.swing.JLabel lbHdRename;
    private javax.swing.JLabel lbHdRenameArrow;
    private javax.swing.JLabel lbHdRenameTarget;
    private javax.swing.JLabel lbHdSearch;
    private javax.swing.JLabel lbHdSearchSearchby;
    private javax.swing.JLabel lbSearchContaining;
    private javax.swing.JLabel lbhdExtExt;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JPanel pAuto;
    private javax.swing.JPanel pBrute;
    private javax.swing.JPanel pFiles;
    private javax.swing.JPanel pSearch;
    private javax.swing.JPanel pSelectencoding;
    private javax.swing.JPanel panelFunctions;
    private javax.swing.JRadioButton rbtnDecodeOverwrite;
    private javax.swing.JRadioButton rbtnDetectAuto;
    private javax.swing.JRadioButton rbtnDetectBrute;
    private javax.swing.JRadioButton rbtnFilterAll;
    private javax.swing.JRadioButton rbtnFilterOther;
    private javax.swing.JRadioButton rbtnHdExtAll;
    private javax.swing.JRadioButton rbtnHdExtOther;
    private javax.swing.JRadioButton rbtnHdRenameall;
    private javax.swing.JRadioButton rbtnHdReplace;
    private javax.swing.JRadioButton rbtnHdSearchRegex;
    private javax.swing.JRadioButton rbtnHdSearchText;
    private javax.swing.JRadioButton rbtnTargetfolder;
    private javax.swing.JSeparator separatorDecode;
    private javax.swing.JSeparator separatorDetect;
    private javax.swing.JSeparator separatorFilter;
    private javax.swing.JSeparator separatorHdExt;
    private javax.swing.JSeparator separatorHdRename;
    private javax.swing.JPanel spDecode;
    private javax.swing.JPanel spDetect;
    private javax.swing.JPanel spFilter;
    private javax.swing.JPanel spHd;
    private javax.swing.JPanel spTools;
    private javax.swing.JPanel spcard;
    private javax.swing.JPanel sspDecode1;
    private javax.swing.JPanel sspDecode2;
    private javax.swing.JPanel sspDetect;
    private javax.swing.JPanel sspDragdrop;
    private javax.swing.JPanel sspDragdrop1;
    private javax.swing.JPanel sspDragdrop3;
    private javax.swing.JScrollPane sspFilesscroll;
    private javax.swing.JPanel sspHdExt;
    private javax.swing.JPanel sspHdSearch;
    private javax.swing.JPanel sspHdrename;
    private javax.swing.JPanel ssspDragdrop2;
    private javax.swing.JScrollPane subPanelFilesScroll1;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable tbFileFiles;
    private javax.swing.JTable tbSearchFiles;
    private javax.swing.JTable tbSelectencoding;
    private javax.swing.JTextArea txtaAutoEncodings;
    private javax.swing.JTextArea txtaBruteEncodings;
    private javax.swing.JTextArea txtareaDetectSelectedencodings;
    private javax.swing.JTextArea txtareaHdSearch;
    private javax.swing.JTextField txtfDecodeTargetfolder;
    private javax.swing.JFormattedTextField txtfDetectSamplesize;
    private javax.swing.JTextField txtfFilterExt;
    private javax.swing.JTextField txtfFilterFilename;
    private javax.swing.JTextField txtfFilterRegex;
    private javax.swing.JTextField txtfHdExtOther;
    private javax.swing.JTextField txtfHdExtTarget;
    private javax.swing.JTextField txtfHdRenameTarget;
    private javax.swing.JTextField txtfRenameReplace;
    // End of variables declaration//GEN-END:variables
    
// </editor-fold>
    FileSelect fileSelect;
    Decoder decoder;
    FileHandler fileHandler;
}

